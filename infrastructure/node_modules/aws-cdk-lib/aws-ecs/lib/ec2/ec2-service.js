"use strict";var __runInitializers=exports&&exports.__runInitializers||function(thisArg,initializers,value){for(var useValue=arguments.length>2,i=0;i<initializers.length;i++)value=useValue?initializers[i].call(thisArg,value):initializers[i].call(thisArg);return useValue?value:void 0},__esDecorate=exports&&exports.__esDecorate||function(ctor,descriptorIn,decorators,contextIn,initializers,extraInitializers){function accept(f){if(f!==void 0&&typeof f!="function")throw new TypeError("Function expected");return f}for(var kind=contextIn.kind,key=kind==="getter"?"get":kind==="setter"?"set":"value",target=!descriptorIn&&ctor?contextIn.static?ctor:ctor.prototype:null,descriptor=descriptorIn||(target?Object.getOwnPropertyDescriptor(target,contextIn.name):{}),_,done=!1,i=decorators.length-1;i>=0;i--){var context={};for(var p in contextIn)context[p]=p==="access"?{}:contextIn[p];for(var p in contextIn.access)context.access[p]=contextIn.access[p];context.addInitializer=function(f){if(done)throw new TypeError("Cannot add initializers after decoration has completed");extraInitializers.push(accept(f||null))};var result=(0,decorators[i])(kind==="accessor"?{get:descriptor.get,set:descriptor.set}:descriptor[key],context);if(kind==="accessor"){if(result===void 0)continue;if(result===null||typeof result!="object")throw new TypeError("Object expected");(_=accept(result.get))&&(descriptor.get=_),(_=accept(result.set))&&(descriptor.set=_),(_=accept(result.init))&&initializers.unshift(_)}else(_=accept(result))&&(kind==="field"?initializers.unshift(_):descriptor[key]=_)}target&&Object.defineProperty(target,contextIn.name,descriptor),done=!0};Object.defineProperty(exports,"__esModule",{value:!0}),exports.BuiltInAttributes=exports.Ec2Service=void 0;var jsiiDeprecationWarnings=()=>{var tmp=require("../../../.warnings.jsii.js");return jsiiDeprecationWarnings=()=>tmp,tmp};const JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti");var ec2=()=>{var tmp=require("../../../aws-ec2");return ec2=()=>tmp,tmp},core_1=()=>{var tmp=require("../../../core");return core_1=()=>tmp,tmp},metadata_resource_1=()=>{var tmp=require("../../../core/lib/metadata-resource");return metadata_resource_1=()=>tmp,tmp},prop_injectable_1=()=>{var tmp=require("../../../core/lib/prop-injectable");return prop_injectable_1=()=>tmp,tmp},availability_zone_rebalancing_1=()=>{var tmp=require("../availability-zone-rebalancing");return availability_zone_rebalancing_1=()=>tmp,tmp},base_service_1=()=>{var tmp=require("../base/base-service");return base_service_1=()=>tmp,tmp},from_service_attributes_1=()=>{var tmp=require("../base/from-service-attributes");return from_service_attributes_1=()=>tmp,tmp},task_definition_1=()=>{var tmp=require("../base/task-definition");return task_definition_1=()=>tmp,tmp};let Ec2Service=(()=>{let _classDecorators=[prop_injectable_1().propertyInjectable],_classDescriptor,_classExtraInitializers=[],_classThis,_classSuper=base_service_1().BaseService,_instanceExtraInitializers=[],_addPlacementStrategies_decorators,_addPlacementConstraints_decorators,_attachToClassicLB_decorators;var Ec2Service2=class extends _classSuper{static{_classThis=this}static{const _metadata=typeof Symbol=="function"&&Symbol.metadata?Object.create(_classSuper[Symbol.metadata]??null):void 0;_addPlacementStrategies_decorators=[(0,metadata_resource_1().MethodMetadata)()],_addPlacementConstraints_decorators=[(0,metadata_resource_1().MethodMetadata)()],_attachToClassicLB_decorators=[(0,metadata_resource_1().MethodMetadata)()],__esDecorate(this,null,_addPlacementStrategies_decorators,{kind:"method",name:"addPlacementStrategies",static:!1,private:!1,access:{has:obj=>"addPlacementStrategies"in obj,get:obj=>obj.addPlacementStrategies},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,_addPlacementConstraints_decorators,{kind:"method",name:"addPlacementConstraints",static:!1,private:!1,access:{has:obj=>"addPlacementConstraints"in obj,get:obj=>obj.addPlacementConstraints},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,_attachToClassicLB_decorators,{kind:"method",name:"attachToClassicLB",static:!1,private:!1,access:{has:obj=>"attachToClassicLB"in obj,get:obj=>obj.attachToClassicLB},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(null,_classDescriptor={value:_classThis},_classDecorators,{kind:"class",name:_classThis.name,metadata:_metadata},null,_classExtraInitializers),Ec2Service2=_classThis=_classDescriptor.value,_metadata&&Object.defineProperty(_classThis,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:_metadata})}static[JSII_RTTI_SYMBOL_1]={fqn:"aws-cdk-lib.aws_ecs.Ec2Service",version:"2.220.0"};static PROPERTY_INJECTION_ID="aws-cdk-lib.aws-ecs.Ec2Service";static fromEc2ServiceArn(scope,id,ec2ServiceArn){class Import extends core_1().Resource{serviceArn=ec2ServiceArn;serviceName=(0,from_service_attributes_1().extractServiceNameFromArn)(this,ec2ServiceArn)}return new Import(scope,id)}static fromEc2ServiceAttributes(scope,id,attrs){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_ecs_Ec2ServiceAttributes(attrs)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.fromEc2ServiceAttributes),error}return(0,from_service_attributes_1().fromServiceAttributes)(scope,id,attrs)}constraints=__runInitializers(this,_instanceExtraInitializers);strategies;daemon;availabilityZoneRebalancingEnabled;constructor(scope,id,props){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_ecs_Ec2ServiceProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,Ec2Service2),error}if(props.daemon&&props.desiredCount!==void 0)throw new(core_1()).ValidationError("Daemon mode launches one task on every instance. Don't supply desiredCount.",scope);if(props.daemon&&props.maxHealthyPercent!==void 0&&props.maxHealthyPercent!==100)throw new(core_1()).ValidationError("Maximum percent must be 100 for daemon mode.",scope);if(props.minHealthyPercent!==void 0&&props.maxHealthyPercent!==void 0&&props.minHealthyPercent>=props.maxHealthyPercent)throw new(core_1()).ValidationError("Minimum healthy percent must be less than maximum healthy percent.",scope);if(!props.taskDefinition.isEc2Compatible)throw new(core_1()).ValidationError("Supplied TaskDefinition is not configured for compatibility with EC2",scope);if(props.securityGroup!==void 0&&props.securityGroups!==void 0)throw new(core_1()).ValidationError("Only one of SecurityGroup or SecurityGroups can be populated.",scope);if(props.availabilityZoneRebalancing===availability_zone_rebalancing_1().AvailabilityZoneRebalancing.ENABLED){if(props.daemon)throw new(core_1()).ValidationError("AvailabilityZoneRebalancing.ENABLED cannot be used with daemon mode",scope);if(!core_1().Token.isUnresolved(props.maxHealthyPercent)&&props.maxHealthyPercent===100)throw new(core_1()).ValidationError("AvailabilityZoneRebalancing.ENABLED requires maxHealthyPercent > 100",scope)}super(scope,id,{...props,desiredCount:props.desiredCount,maxHealthyPercent:props.daemon&&props.maxHealthyPercent===void 0?100:props.maxHealthyPercent,minHealthyPercent:props.daemon&&props.minHealthyPercent===void 0?0:props.minHealthyPercent,launchType:base_service_1().LaunchType.EC2,enableECSManagedTags:props.enableECSManagedTags},{cluster:props.cluster.clusterName,taskDefinition:props.deploymentController?.type===base_service_1().DeploymentControllerType.EXTERNAL?void 0:props.taskDefinition.taskDefinitionArn,placementConstraints:core_1().Lazy.any({produce:()=>this.constraints}),placementStrategies:core_1().Lazy.any({produce:()=>this.strategies},{omitEmptyArray:!0}),schedulingStrategy:props.daemon?"DAEMON":"REPLICA",availabilityZoneRebalancing:props.availabilityZoneRebalancing},props.taskDefinition),(0,metadata_resource_1().addConstructMetadata)(this,props),this.constraints=void 0,this.strategies=[],this.daemon=props.daemon||!1,this.availabilityZoneRebalancingEnabled=props.availabilityZoneRebalancing===availability_zone_rebalancing_1().AvailabilityZoneRebalancing.ENABLED;let securityGroups;props.securityGroup!==void 0?securityGroups=[props.securityGroup]:props.securityGroups!==void 0&&(securityGroups=props.securityGroups),props.taskDefinition.networkMode===task_definition_1().NetworkMode.AWS_VPC?this.configureAwsVpcNetworkingWithSecurityGroups(props.cluster.vpc,props.assignPublicIp,props.vpcSubnets,securityGroups):(validateNoNetworkingProps(scope,props),this.connections.addSecurityGroup(...securityGroupsInThisStack(this,props.cluster.connections.securityGroups))),props.placementConstraints&&this.addPlacementConstraints(...props.placementConstraints),this.addPlacementStrategies(...props.placementStrategies||[]),this.node.addValidation({validate:()=>this.taskDefinition.defaultContainer?[]:["A TaskDefinition must have at least one essential container"]}),this.node.addValidation({validate:this.validateEc2Service.bind(this)}),props.minHealthyPercent===void 0&&props.daemon&&core_1().Annotations.of(this).addWarningV2("@aws-cdk/aws-ecs:minHealthyPercentDaemon","minHealthyPercent has not been configured so the default value of 0% for a daemon service is used. See https://github.com/aws/aws-cdk/issues/31705")}addPlacementStrategies(...strategies){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_ecs_PlacementStrategy(strategies)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.addPlacementStrategies),error}if(strategies.length>0&&this.daemon)throw new(core_1()).ValidationError("Can't configure placement strategies when daemon=true",this);if(strategies.length>0&&this.strategies.length===0&&this.availabilityZoneRebalancingEnabled){const[placement]=strategies[0].toJson();if(placement.type!=="spread"||placement.field!==BuiltInAttributes.AVAILABILITY_ZONE)throw new(core_1()).ValidationError(`AvailabilityZoneBalancing.ENABLED requires that the first placement strategy, if any, be 'spread across "${BuiltInAttributes.AVAILABILITY_ZONE}"'`,this)}for(const strategy of strategies)this.strategies.push(...strategy.toJson())}addPlacementConstraints(...constraints){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_ecs_PlacementConstraint(constraints)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.addPlacementConstraints),error}this.constraints=[];for(const constraint of constraints){const items=constraint.toJson();if(this.availabilityZoneRebalancingEnabled){for(const item of items)if(item.type==="memberOf"&&item.expression?.includes(BuiltInAttributes.AVAILABILITY_ZONE))throw new(core_1()).ValidationError(`AvailabilityZoneBalancing.ENABLED disallows usage of "${BuiltInAttributes.AVAILABILITY_ZONE}"`,this)}this.constraints.push(...items)}}validateEc2Service(){const ret=new Array;return!this.daemon&&!this.cluster.hasEc2Capacity&&ret.push("Cluster for this service needs Ec2 capacity. Call addXxxCapacity() on the cluster."),ret}attachToClassicLB(loadBalancer){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_elasticloadbalancing_LoadBalancer(loadBalancer)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.attachToClassicLB),error}if(this.availabilityZoneRebalancingEnabled)throw new(core_1()).ValidationError("AvailabilityZoneRebalancing.ENABLED disallows using the service as a target of a Classic Load Balancer",this);super.attachToClassicLB(loadBalancer)}static{__runInitializers(_classThis,_classExtraInitializers)}};return Ec2Service2=_classThis})();exports.Ec2Service=Ec2Service;function validateNoNetworkingProps(scope,props){if(props.vpcSubnets!==void 0||props.securityGroup!==void 0||props.securityGroups!==void 0||props.assignPublicIp)throw new(core_1()).ValidationError("vpcSubnets, securityGroup(s) and assignPublicIp can only be used in AwsVpc networking mode",scope)}function securityGroupsInThisStack(scope,groups){const thisStack=core_1().Stack.of(scope);let i=1;return groups.map(group=>thisStack===core_1().Stack.of(group)?group:ec2().SecurityGroup.fromSecurityGroupId(scope,`SecurityGroup${i++}`,group.securityGroupId,{allowAllOutbound:group.allowAllOutbound,mutable:!0}))}class BuiltInAttributes{static[JSII_RTTI_SYMBOL_1]={fqn:"aws-cdk-lib.aws_ecs.BuiltInAttributes",version:"2.220.0"};static INSTANCE_ID="instanceId";static AVAILABILITY_ZONE="attribute:ecs.availability-zone";static AMI_ID="attribute:ecs.ami-id";static INSTANCE_TYPE="attribute:ecs.instance-type";static OS_TYPE="attribute:ecs.os-type"}exports.BuiltInAttributes=BuiltInAttributes;

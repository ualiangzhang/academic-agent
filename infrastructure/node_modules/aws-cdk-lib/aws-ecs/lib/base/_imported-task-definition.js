"use strict";var __esDecorate=exports&&exports.__esDecorate||function(ctor,descriptorIn,decorators,contextIn,initializers,extraInitializers){function accept(f){if(f!==void 0&&typeof f!="function")throw new TypeError("Function expected");return f}for(var kind=contextIn.kind,key=kind==="getter"?"get":kind==="setter"?"set":"value",target=!descriptorIn&&ctor?contextIn.static?ctor:ctor.prototype:null,descriptor=descriptorIn||(target?Object.getOwnPropertyDescriptor(target,contextIn.name):{}),_,done=!1,i=decorators.length-1;i>=0;i--){var context={};for(var p in contextIn)context[p]=p==="access"?{}:contextIn[p];for(var p in contextIn.access)context.access[p]=contextIn.access[p];context.addInitializer=function(f){if(done)throw new TypeError("Cannot add initializers after decoration has completed");extraInitializers.push(accept(f||null))};var result=(0,decorators[i])(kind==="accessor"?{get:descriptor.get,set:descriptor.set}:descriptor[key],context);if(kind==="accessor"){if(result===void 0)continue;if(result===null||typeof result!="object")throw new TypeError("Object expected");(_=accept(result.get))&&(descriptor.get=_),(_=accept(result.set))&&(descriptor.set=_),(_=accept(result.init))&&initializers.unshift(_)}else(_=accept(result))&&(kind==="field"?initializers.unshift(_):descriptor[key]=_)}target&&Object.defineProperty(target,contextIn.name,descriptor),done=!0},__runInitializers=exports&&exports.__runInitializers||function(thisArg,initializers,value){for(var useValue=arguments.length>2,i=0;i<initializers.length;i++)value=useValue?initializers[i].call(thisArg,value):initializers[i].call(thisArg);return useValue?value:void 0};Object.defineProperty(exports,"__esModule",{value:!0}),exports.ImportedTaskDefinition=void 0;var task_definition_1=()=>{var tmp=require("./task-definition");return task_definition_1=()=>tmp,tmp},core_1=()=>{var tmp=require("../../../core");return core_1=()=>tmp,tmp},metadata_resource_1=()=>{var tmp=require("../../../core/lib/metadata-resource");return metadata_resource_1=()=>tmp,tmp},prop_injectable_1=()=>{var tmp=require("../../../core/lib/prop-injectable");return prop_injectable_1=()=>tmp,tmp};let ImportedTaskDefinition=(()=>{let _classDecorators=[prop_injectable_1().propertyInjectable],_classDescriptor,_classExtraInitializers=[],_classThis,_classSuper=core_1().Resource;var ImportedTaskDefinition2=class extends _classSuper{static{_classThis=this}static{const _metadata=typeof Symbol=="function"&&Symbol.metadata?Object.create(_classSuper[Symbol.metadata]??null):void 0;__esDecorate(null,_classDescriptor={value:_classThis},_classDecorators,{kind:"class",name:_classThis.name,metadata:_metadata},null,_classExtraInitializers),ImportedTaskDefinition2=_classThis=_classDescriptor.value,_metadata&&Object.defineProperty(_classThis,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:_metadata})}static PROPERTY_INJECTION_ID="aws-cdk-lib.aws-ecs.ImportedTaskDefinition";compatibility;taskDefinitionArn;executionRole=void 0;_networkMode;_taskRole;constructor(scope,id,props){super(scope,id),(0,metadata_resource_1().addConstructMetadata)(this,props),this.compatibility=props.compatibility??task_definition_1().Compatibility.EC2_AND_FARGATE,this.taskDefinitionArn=props.taskDefinitionArn,this.executionRole=props.executionRole,this._taskRole=props.taskRole,this._networkMode=props.networkMode}get networkMode(){if(this._networkMode==null)throw new(core_1()).ValidationError("This operation requires the networkMode in ImportedTaskDefinition to be defined. Add the 'networkMode' in ImportedTaskDefinitionProps to instantiate ImportedTaskDefinition",this);return this._networkMode}get taskRole(){if(this._taskRole==null)throw new(core_1()).ValidationError("This operation requires the taskRole in ImportedTaskDefinition to be defined. Add the 'taskRole' in ImportedTaskDefinitionProps to instantiate ImportedTaskDefinition",this);return this._taskRole}get isEc2Compatible(){return(0,task_definition_1().isEc2Compatible)(this.compatibility)}get isFargateCompatible(){return(0,task_definition_1().isFargateCompatible)(this.compatibility)}get isExternalCompatible(){return(0,task_definition_1().isExternalCompatible)(this.compatibility)}get isManagedInstancesCompatible(){return(0,task_definition_1().isManagedInstancesCompatible)(this.compatibility)}static{__runInitializers(_classThis,_classExtraInitializers)}};return ImportedTaskDefinition2=_classThis})();exports.ImportedTaskDefinition=ImportedTaskDefinition;

"use strict";var __runInitializers=exports&&exports.__runInitializers||function(thisArg,initializers,value){for(var useValue=arguments.length>2,i=0;i<initializers.length;i++)value=useValue?initializers[i].call(thisArg,value):initializers[i].call(thisArg);return useValue?value:void 0},__esDecorate=exports&&exports.__esDecorate||function(ctor,descriptorIn,decorators,contextIn,initializers,extraInitializers){function accept(f){if(f!==void 0&&typeof f!="function")throw new TypeError("Function expected");return f}for(var kind=contextIn.kind,key=kind==="getter"?"get":kind==="setter"?"set":"value",target=!descriptorIn&&ctor?contextIn.static?ctor:ctor.prototype:null,descriptor=descriptorIn||(target?Object.getOwnPropertyDescriptor(target,contextIn.name):{}),_,done=!1,i=decorators.length-1;i>=0;i--){var context={};for(var p in contextIn)context[p]=p==="access"?{}:contextIn[p];for(var p in contextIn.access)context.access[p]=contextIn.access[p];context.addInitializer=function(f){if(done)throw new TypeError("Cannot add initializers after decoration has completed");extraInitializers.push(accept(f||null))};var result=(0,decorators[i])(kind==="accessor"?{get:descriptor.get,set:descriptor.set}:descriptor[key],context);if(kind==="accessor"){if(result===void 0)continue;if(result===null||typeof result!="object")throw new TypeError("Object expected");(_=accept(result.get))&&(descriptor.get=_),(_=accept(result.set))&&(descriptor.set=_),(_=accept(result.init))&&initializers.unshift(_)}else(_=accept(result))&&(kind==="field"?initializers.unshift(_):descriptor[key]=_)}target&&Object.defineProperty(target,contextIn.name,descriptor),done=!0};Object.defineProperty(exports,"__esModule",{value:!0}),exports.Role=void 0;var jsiiDeprecationWarnings=()=>{var tmp=require("../../.warnings.jsii.js");return jsiiDeprecationWarnings=()=>tmp,tmp};const JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti");var constructs_1=()=>{var tmp=require("constructs");return constructs_1=()=>tmp,tmp},grant_1=()=>{var tmp=require("./grant");return grant_1=()=>tmp,tmp},iam_generated_1=()=>{var tmp=require("./iam.generated");return iam_generated_1=()=>tmp,tmp},managed_policy_1=()=>{var tmp=require("./managed-policy");return managed_policy_1=()=>tmp,tmp},policy_1=()=>{var tmp=require("./policy");return policy_1=()=>tmp,tmp},policy_document_1=()=>{var tmp=require("./policy-document");return policy_document_1=()=>tmp,tmp},principals_1=()=>{var tmp=require("./principals");return principals_1=()=>tmp,tmp},assume_role_policy_1=()=>{var tmp=require("./private/assume-role-policy");return assume_role_policy_1=()=>tmp,tmp},immutable_role_1=()=>{var tmp=require("./private/immutable-role");return immutable_role_1=()=>tmp,tmp},imported_role_1=()=>{var tmp=require("./private/imported-role");return imported_role_1=()=>tmp,tmp},policydoc_adapter_1=()=>{var tmp=require("./private/policydoc-adapter");return policydoc_adapter_1=()=>tmp,tmp},precreated_role_1=()=>{var tmp=require("./private/precreated-role");return precreated_role_1=()=>tmp,tmp},util_1=()=>{var tmp=require("./private/util");return util_1=()=>tmp,tmp},cxschema=()=>{var tmp=require("../../cloud-assembly-schema");return cxschema=()=>tmp,tmp},core_1=()=>{var tmp=require("../../core");return core_1=()=>tmp,tmp},helpers_internal_1=()=>{var tmp=require("../../core/lib/helpers-internal");return helpers_internal_1=()=>tmp,tmp},metadata_resource_1=()=>{var tmp=require("../../core/lib/metadata-resource");return metadata_resource_1=()=>tmp,tmp},aspect_prio_1=()=>{var tmp=require("../../core/lib/private/aspect-prio");return aspect_prio_1=()=>tmp,tmp},prop_injectable_1=()=>{var tmp=require("../../core/lib/prop-injectable");return prop_injectable_1=()=>tmp,tmp};const MAX_INLINE_SIZE=1e4,MAX_MANAGEDPOL_SIZE=6e3,IAM_ROLE_SYMBOL=Symbol.for("@aws-cdk/packages/aws-iam/lib/role.Role");let Role=(()=>{let _classDecorators=[prop_injectable_1().propertyInjectable],_classDescriptor,_classExtraInitializers=[],_classThis,_classSuper=core_1().Resource,_instanceExtraInitializers=[],_addToPrincipalPolicy_decorators,_addToPolicy_decorators,_addManagedPolicy_decorators,_attachInlinePolicy_decorators,_grant_decorators,_grantPassRole_decorators,_grantAssumeRole_decorators,_withoutPolicyUpdates_decorators,_applyRemovalPolicy_decorators;var Role2=class extends _classSuper{static{_classThis=this}static{const _metadata=typeof Symbol=="function"&&Symbol.metadata?Object.create(_classSuper[Symbol.metadata]??null):void 0;_addToPrincipalPolicy_decorators=[(0,metadata_resource_1().MethodMetadata)()],_addToPolicy_decorators=[(0,metadata_resource_1().MethodMetadata)()],_addManagedPolicy_decorators=[(0,metadata_resource_1().MethodMetadata)()],_attachInlinePolicy_decorators=[(0,metadata_resource_1().MethodMetadata)()],_grant_decorators=[(0,metadata_resource_1().MethodMetadata)()],_grantPassRole_decorators=[(0,metadata_resource_1().MethodMetadata)()],_grantAssumeRole_decorators=[(0,metadata_resource_1().MethodMetadata)()],_withoutPolicyUpdates_decorators=[(0,metadata_resource_1().MethodMetadata)()],_applyRemovalPolicy_decorators=[(0,metadata_resource_1().MethodMetadata)()],__esDecorate(this,null,_addToPrincipalPolicy_decorators,{kind:"method",name:"addToPrincipalPolicy",static:!1,private:!1,access:{has:obj=>"addToPrincipalPolicy"in obj,get:obj=>obj.addToPrincipalPolicy},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,_addToPolicy_decorators,{kind:"method",name:"addToPolicy",static:!1,private:!1,access:{has:obj=>"addToPolicy"in obj,get:obj=>obj.addToPolicy},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,_addManagedPolicy_decorators,{kind:"method",name:"addManagedPolicy",static:!1,private:!1,access:{has:obj=>"addManagedPolicy"in obj,get:obj=>obj.addManagedPolicy},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,_attachInlinePolicy_decorators,{kind:"method",name:"attachInlinePolicy",static:!1,private:!1,access:{has:obj=>"attachInlinePolicy"in obj,get:obj=>obj.attachInlinePolicy},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,_grant_decorators,{kind:"method",name:"grant",static:!1,private:!1,access:{has:obj=>"grant"in obj,get:obj=>obj.grant},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,_grantPassRole_decorators,{kind:"method",name:"grantPassRole",static:!1,private:!1,access:{has:obj=>"grantPassRole"in obj,get:obj=>obj.grantPassRole},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,_grantAssumeRole_decorators,{kind:"method",name:"grantAssumeRole",static:!1,private:!1,access:{has:obj=>"grantAssumeRole"in obj,get:obj=>obj.grantAssumeRole},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,_withoutPolicyUpdates_decorators,{kind:"method",name:"withoutPolicyUpdates",static:!1,private:!1,access:{has:obj=>"withoutPolicyUpdates"in obj,get:obj=>obj.withoutPolicyUpdates},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(this,null,_applyRemovalPolicy_decorators,{kind:"method",name:"applyRemovalPolicy",static:!1,private:!1,access:{has:obj=>"applyRemovalPolicy"in obj,get:obj=>obj.applyRemovalPolicy},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(null,_classDescriptor={value:_classThis},_classDecorators,{kind:"class",name:_classThis.name,metadata:_metadata},null,_classExtraInitializers),Role2=_classThis=_classDescriptor.value,_metadata&&Object.defineProperty(_classThis,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:_metadata})}static[JSII_RTTI_SYMBOL_1]={fqn:"aws-cdk-lib.aws_iam.Role",version:"2.220.0"};static PROPERTY_INJECTION_ID="aws-cdk-lib.aws-iam.Role";static fromLookup(scope,id,options){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_iam_RoleLookupOptions(options)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.fromLookup),error}if(core_1().Token.isUnresolved(options.roleName))throw new(core_1()).ValidationError("All arguments to look up a role must be concrete (no Tokens)",scope);const role=core_1().ContextProvider.getValue(scope,{provider:cxschema().ContextProvider.CC_API_PROVIDER,props:{typeName:"AWS::IAM::Role",exactIdentifier:options.roleName,propertiesToReturn:["Arn"]},dummyValue:[{Arn:core_1().Stack.of(scope).formatArn({service:"iam",account:"123456789012",resource:"role",resourceName:"DUMMY_ARN"})}]}).value[0];return this.fromRoleArn(scope,id,role.Arn,options)}static fromRoleArn(scope,id,roleArn,options={}){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_iam_FromRoleArnOptions(options)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.fromRoleArn),error}const scopeStack=core_1().Stack.of(scope),parsedArn=scopeStack.splitArn(roleArn,core_1().ArnFormat.SLASH_RESOURCE_NAME),resourceName=parsedArn.resourceName,roleAccount=parsedArn.account,roleName=resourceName.split("/").pop();if((0,helpers_internal_1().getCustomizeRolesConfig)(scope).enabled)return new(precreated_role_1()).PrecreatedRole(scope,id,{rolePath:`${scope.node.path}/${id}`,role:new(imported_role_1()).ImportedRole(scope,`Import${id}`,{account:roleAccount,roleArn,roleName,...options})});if(options.addGrantsToResources!==void 0&&options.mutable!==!1)throw new(core_1()).ValidationError("'addGrantsToResources' can only be passed if 'mutable: false'",scope);const roleArnAndScopeStackAccountComparison=core_1().Token.compareStrings(roleAccount??"",scopeStack.account),equalOrAnyUnresolved=roleArnAndScopeStackAccountComparison===core_1().TokenComparison.SAME||roleArnAndScopeStackAccountComparison===core_1().TokenComparison.BOTH_UNRESOLVED||roleArnAndScopeStackAccountComparison===core_1().TokenComparison.ONE_UNRESOLVED,mutableRoleId=options.mutable!==!1&&equalOrAnyUnresolved?id:`MutableRole${id}`,importedRole=new(imported_role_1()).ImportedRole(scope,mutableRoleId,{roleArn,roleName,account:roleAccount,...options});return options.mutable!==!1&&equalOrAnyUnresolved?importedRole:new(immutable_role_1()).ImmutableRole(scope,id,importedRole,options.addGrantsToResources??!1)}static isRole(x){return x!==null&&typeof x=="object"&&IAM_ROLE_SYMBOL in x}static fromRoleName(scope,id,roleName,options={}){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_iam_FromRoleNameOptions(options)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.fromRoleName),error}return Role2.fromRoleArn(scope,id,core_1().Stack.of(scope).formatArn({region:"",service:"iam",resource:"role",resourceName:roleName}),options)}static customizeRoles(scope,options){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_iam_CustomizeRolesOptions(options)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.customizeRoles),error}const preventSynthesis=options?.preventSynthesis??!0,useRoles={};for(const[constructPath,roleName]of Object.entries(options?.usePrecreatedRoles??{})){const absPath=constructPath.startsWith(scope.node.path)?constructPath:`${scope.node.path}/${constructPath}`;useRoles[absPath]=roleName}scope.node.setContext(helpers_internal_1().CUSTOMIZE_ROLES_CONTEXT_KEY,{preventSynthesis,usePrecreatedRoles:useRoles})}grantPrincipal=(__runInitializers(this,_instanceExtraInitializers),this);principalAccount=this.env.account;assumeRoleAction="sts:AssumeRole";assumeRolePolicy;roleArn;roleName;policyFragment;permissionsBoundary;defaultPolicy;managedPolicies=[];attachedPolicies=new(util_1()).AttachedPolicies;inlinePolicies;dependables=new Map;immutableRole;_didSplit=!1;_roleId;_precreatedRole;constructor(scope,id,props){super(scope,id,{physicalName:props.roleName});try{jsiiDeprecationWarnings().aws_cdk_lib_aws_iam_RoleProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,Role2),error}if((0,metadata_resource_1().addConstructMetadata)(this,props),props.roleName&&!core_1().Token.isUnresolved(props.roleName)&&!/^[\w+=,.@-]{1,64}$/.test(props.roleName))throw new(core_1()).ValidationError("Invalid roleName. The name must be a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-. Length must be between 1 and 64 characters.",this);const externalIds=props.externalIds||[];props.externalId&&externalIds.push(props.externalId),this.assumeRolePolicy=createAssumeRolePolicy(props.assumedBy,externalIds),this.managedPolicies.push(...props.managedPolicies||[]),this.inlinePolicies=props.inlinePolicies||{},this.permissionsBoundary=props.permissionsBoundary;const maxSessionDuration=props.maxSessionDuration&&props.maxSessionDuration.toSeconds();validateMaxSessionDuration(this,maxSessionDuration);const description=props.description&&props.description?.length>0?props.description:void 0;if(description&&description.length>1e3)throw new(core_1()).ValidationError("Role description must be no longer than 1000 characters.",this);validateRolePath(this,props.path);const config=this.getPrecreatedRoleConfig(),roleArn=core_1().Stack.of(scope).formatArn({region:"",service:"iam",resource:"role",resourceName:config.precreatedRoleName}),importedRole=new(imported_role_1()).ImportedRole(this,"Import"+id,{roleArn,roleName:config.precreatedRoleName??id,account:core_1().Stack.of(this).account});if(this.roleName=importedRole.roleName,this.roleArn=importedRole.roleArn,config.enabled){const role=new(precreated_role_1()).PrecreatedRole(this,"PrecreatedRole"+id,{rolePath:this.node.path,role:importedRole,missing:!config.precreatedRoleName,assumeRolePolicy:this.assumeRolePolicy});this.managedPolicies.forEach(policy=>role.addManagedPolicy(policy)),Object.entries(this.inlinePolicies).forEach(([name,policy])=>{role.attachInlinePolicy(new(policy_1()).Policy(this,name,{document:policy}))}),this._precreatedRole=role}if(!config.preventSynthesis){const role=new(iam_generated_1()).CfnRole(this,"Resource",{assumeRolePolicyDocument:this.assumeRolePolicy,managedPolicyArns:util_1().UniqueStringSet.from(()=>this.managedPolicies.map(p=>p.managedPolicyArn)),policies:_flatten(this.inlinePolicies),path:props.path,permissionsBoundary:this.permissionsBoundary?this.permissionsBoundary.managedPolicyArn:void 0,roleName:this.physicalName,maxSessionDuration,description});this._roleId=role.attrRoleId,this.roleArn=this.getResourceArnAttribute(role.attrArn,{region:"",service:"iam",resource:"role",resourceName:`${props.path?props.path.substr(props.path.charAt(0)==="/"?1:0):""}${this.physicalName}`}),this.roleName=this.getResourceNameAttribute(role.ref),core_1().Aspects.of(this).add({visit:c=>{c===this&&this.splitLargePolicy()}},{priority:(0,aspect_prio_1().mutatingAspectPrio32333)(this)})}this.policyFragment=new(principals_1()).ArnPrincipal(this.roleArn).policyFragment;function _flatten(policies){if(policies==null||Object.keys(policies).length===0)return;const result=new Array;for(const policyName of Object.keys(policies)){const policyDocument=policies[policyName];result.push({policyName,policyDocument})}return result}this.node.addValidation({validate:()=>this.validateRole()})}get roleRef(){return{roleName:this.roleName,roleArn:this.roleArn}}addToPrincipalPolicy(statement){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_iam_PolicyStatement(statement)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.addToPrincipalPolicy),error}if(this._precreatedRole)return this._precreatedRole.addToPrincipalPolicy(statement);{this.defaultPolicy||(this.defaultPolicy=new(policy_1()).Policy(this,"DefaultPolicy"),this.attachInlinePolicy(this.defaultPolicy)),this.defaultPolicy.addStatements(statement);const policyDependable=new(constructs_1()).DependencyGroup;return this.dependables.set(statement,policyDependable),{statementAdded:!0,policyDependable}}}addToPolicy(statement){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_iam_PolicyStatement(statement)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.addToPolicy),error}return this._precreatedRole?this._precreatedRole.addToPolicy(statement):this.addToPrincipalPolicy(statement).statementAdded}addManagedPolicy(policy){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_iam_IManagedPolicy(policy)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.addManagedPolicy),error}if(this._precreatedRole)return this._precreatedRole.addManagedPolicy(policy);if(this.managedPolicies.some(mp=>mp.managedPolicyArn===policy.managedPolicyArn))return;this.managedPolicies.push(policy)}attachInlinePolicy(policy){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_iam_Policy(policy)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.attachInlinePolicy),error}this._precreatedRole?this._precreatedRole.attachInlinePolicy(policy):(this.attachedPolicies.attach(policy),policy.attachToRole(this))}grant(grantee,...actions){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_iam_IPrincipal(grantee)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.grant),error}return grant_1().Grant.addToPrincipal({grantee,actions,resourceArns:[this.roleArn],scope:this})}grantPassRole(identity){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_iam_IPrincipal(identity)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.grantPassRole),error}return this.grant(identity,"iam:PassRole")}grantAssumeRole(identity){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_iam_IPrincipal(identity)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.grantAssumeRole),error}if(identity instanceof principals_1().ServicePrincipal||identity instanceof principals_1().AccountPrincipal)throw new(core_1()).ValidationError("Cannot use a service or account principal with grantAssumeRole, use assumeRolePolicy instead.",this);return this.grant(identity,"sts:AssumeRole")}get roleId(){if(!this._roleId)throw new(core_1()).ValidationError('"roleId" is not available on precreated roles',this);return this._roleId}withoutPolicyUpdates(options={}){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_iam_WithoutPolicyUpdatesOptions(options)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.withoutPolicyUpdates),error}return this.immutableRole||(this.immutableRole=new(immutable_role_1()).ImmutableRole(constructs_1().Node.of(this).scope,`ImmutableRole${this.node.id}`,this,options.addGrantsToResources??!1)),this.immutableRole}applyRemovalPolicy(policy){try{jsiiDeprecationWarnings().aws_cdk_lib_RemovalPolicy(policy)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.applyRemovalPolicy),error}this.getPrecreatedRoleConfig().preventSynthesis||super.applyRemovalPolicy(policy)}validateRole(){const errors=new Array;errors.push(...this.assumeRolePolicy?.validateForResourcePolicy()??[]);for(const policy of Object.values(this.inlinePolicies))errors.push(...policy.validateForIdentityPolicy());return errors}splitLargePolicy(){if(!this.defaultPolicy||this._didSplit)return;this._didSplit=!0;const self=this,originalDoc=this.defaultPolicy.document,splitOffDocs=originalDoc._splitDocument(this,MAX_INLINE_SIZE,MAX_MANAGEDPOL_SIZE),mpCount=this.managedPolicies.length+(splitOffDocs.size-1);mpCount>20?core_1().Annotations.of(this).addWarningV2("@aws-cdk/aws-iam:rolePolicyTooLarge",`Policy too large: ${mpCount} exceeds the maximum of 20 managed policies attached to a Role`):mpCount>10&&core_1().Annotations.of(this).addWarningV2("@aws-cdk/aws-iam:rolePolicyLarge",`Policy large: ${mpCount} exceeds 10 managed policies attached to a Role, this requires a quota increase`),markDeclaringConstruct(originalDoc,this.defaultPolicy);let i=1;for(const newDoc of splitOffDocs.keys()){if(newDoc===originalDoc)continue;const mp=new(managed_policy_1()).ManagedPolicy(this,`OverflowPolicy${i++}`,{description:`Part of the policies for ${this.node.path}`,document:newDoc,roles:[this]});markDeclaringConstruct(newDoc,mp)}function markDeclaringConstruct(doc,declaringConstruct){for(const original of splitOffDocs.get(doc)??[])self.dependables.get(original)?.add(declaringConstruct)}}getPrecreatedRoleConfig(){return(0,helpers_internal_1().getPrecreatedRoleConfig)(this)}static{__runInitializers(_classThis,_classExtraInitializers)}};return Role2=_classThis})();exports.Role=Role;function createAssumeRolePolicy(principal,externalIds){const actualDoc=new(policy_document_1()).PolicyDocument,addDoc=externalIds.length===0?actualDoc:new(policydoc_adapter_1()).MutatingPolicyDocumentAdapter(actualDoc,statement=>(statement.addCondition("StringEquals",{"sts:ExternalId":externalIds.length===1?externalIds[0]:externalIds}),statement));return(0,assume_role_policy_1().defaultAddPrincipalToAssumeRole)(principal,addDoc),actualDoc}function validateRolePath(scope,path){if(path===void 0||core_1().Token.isUnresolved(path))return;const validRolePath=/^(\/|\/[\u0021-\u007F]+\/)$/;if(path.length==0||path.length>512)throw new(core_1()).ValidationError(`Role path must be between 1 and 512 characters. The provided role path is ${path.length} characters.`,scope);if(!validRolePath.test(path))throw new(core_1()).ValidationError(`Role path must be either a slash or valid characters (alphanumerics and symbols) surrounded by slashes. Valid characters are unicode characters in [\\u0021-\\u007F]. However, ${path} is provided.`,scope)}function validateMaxSessionDuration(scope,duration){if(duration!==void 0&&(duration<3600||duration>43200))throw new(core_1()).ValidationError(`maxSessionDuration is set to ${duration}, but must be >= 3600sec (1hr) and <= 43200sec (12hrs)`,scope)}Object.defineProperty(Role.prototype,IAM_ROLE_SYMBOL,{value:!0,enumerable:!1,writable:!1});

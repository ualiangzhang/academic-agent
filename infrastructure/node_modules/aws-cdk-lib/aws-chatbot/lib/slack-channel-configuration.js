"use strict";var __runInitializers=exports&&exports.__runInitializers||function(thisArg,initializers,value){for(var useValue=arguments.length>2,i=0;i<initializers.length;i++)value=useValue?initializers[i].call(thisArg,value):initializers[i].call(thisArg);return useValue?value:void 0},__esDecorate=exports&&exports.__esDecorate||function(ctor,descriptorIn,decorators,contextIn,initializers,extraInitializers){function accept(f){if(f!==void 0&&typeof f!="function")throw new TypeError("Function expected");return f}for(var kind=contextIn.kind,key=kind==="getter"?"get":kind==="setter"?"set":"value",target=!descriptorIn&&ctor?contextIn.static?ctor:ctor.prototype:null,descriptor=descriptorIn||(target?Object.getOwnPropertyDescriptor(target,contextIn.name):{}),_,done=!1,i=decorators.length-1;i>=0;i--){var context={};for(var p in contextIn)context[p]=p==="access"?{}:contextIn[p];for(var p in contextIn.access)context.access[p]=contextIn.access[p];context.addInitializer=function(f){if(done)throw new TypeError("Cannot add initializers after decoration has completed");extraInitializers.push(accept(f||null))};var result=(0,decorators[i])(kind==="accessor"?{get:descriptor.get,set:descriptor.set}:descriptor[key],context);if(kind==="accessor"){if(result===void 0)continue;if(result===null||typeof result!="object")throw new TypeError("Object expected");(_=accept(result.get))&&(descriptor.get=_),(_=accept(result.set))&&(descriptor.set=_),(_=accept(result.init))&&initializers.unshift(_)}else(_=accept(result))&&(kind==="field"?initializers.unshift(_):descriptor[key]=_)}target&&Object.defineProperty(target,contextIn.name,descriptor),done=!0};Object.defineProperty(exports,"__esModule",{value:!0}),exports.SlackChannelConfiguration=exports.LoggingLevel=void 0;var jsiiDeprecationWarnings=()=>{var tmp=require("../../.warnings.jsii.js");return jsiiDeprecationWarnings=()=>tmp,tmp};const JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti");var chatbot_generated_1=()=>{var tmp=require("./chatbot.generated");return chatbot_generated_1=()=>tmp,tmp},cloudwatch=()=>{var tmp=require("../../aws-cloudwatch");return cloudwatch=()=>tmp,tmp},iam=()=>{var tmp=require("../../aws-iam");return iam=()=>tmp,tmp},logs=()=>{var tmp=require("../../aws-logs");return logs=()=>tmp,tmp},cdk=()=>{var tmp=require("../../core");return cdk=()=>tmp,tmp},metadata_resource_1=()=>{var tmp=require("../../core/lib/metadata-resource");return metadata_resource_1=()=>tmp,tmp},prop_injectable_1=()=>{var tmp=require("../../core/lib/prop-injectable");return prop_injectable_1=()=>tmp,tmp},LoggingLevel;(function(LoggingLevel2){LoggingLevel2.ERROR="ERROR",LoggingLevel2.INFO="INFO",LoggingLevel2.NONE="NONE"})(LoggingLevel||(exports.LoggingLevel=LoggingLevel={}));class SlackChannelConfigurationBase extends cdk().Resource{addToRolePolicy(statement){this.role&&this.role.addToPrincipalPolicy(statement)}metric(metricName,props){return new(cloudwatch()).Metric({namespace:"AWS/Chatbot",region:"us-east-1",dimensionsMap:{ConfigurationName:this.slackChannelConfigurationName},metricName,...props})}bindAsNotificationRuleTarget(_scope){return{targetType:"AWSChatbotSlack",targetAddress:this.slackChannelConfigurationArn}}}let SlackChannelConfiguration=(()=>{let _classDecorators=[prop_injectable_1().propertyInjectable],_classDescriptor,_classExtraInitializers=[],_classThis,_classSuper=SlackChannelConfigurationBase,_instanceExtraInitializers=[],_addNotificationTopic_decorators;var SlackChannelConfiguration2=class extends _classSuper{static{_classThis=this}static{const _metadata=typeof Symbol=="function"&&Symbol.metadata?Object.create(_classSuper[Symbol.metadata]??null):void 0;_addNotificationTopic_decorators=[(0,metadata_resource_1().MethodMetadata)()],__esDecorate(this,null,_addNotificationTopic_decorators,{kind:"method",name:"addNotificationTopic",static:!1,private:!1,access:{has:obj=>"addNotificationTopic"in obj,get:obj=>obj.addNotificationTopic},metadata:_metadata},null,_instanceExtraInitializers),__esDecorate(null,_classDescriptor={value:_classThis},_classDecorators,{kind:"class",name:_classThis.name,metadata:_metadata},null,_classExtraInitializers),SlackChannelConfiguration2=_classThis=_classDescriptor.value,_metadata&&Object.defineProperty(_classThis,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:_metadata})}static[JSII_RTTI_SYMBOL_1]={fqn:"aws-cdk-lib.aws_chatbot.SlackChannelConfiguration",version:"2.220.0"};static PROPERTY_INJECTION_ID="aws-cdk-lib.aws-chatbot.SlackChannelConfiguration";static fromSlackChannelConfigurationArn(scope,id,slackChannelConfigurationArn){const re=/^slack-channel\//,resourceName=cdk().Arn.extractResourceName(slackChannelConfigurationArn,"chat-configuration");if(!cdk().Token.isUnresolved(slackChannelConfigurationArn)&&!re.test(resourceName))throw new(cdk()).ValidationError("The ARN of a Slack integration must be in the form: arn:<partition>:chatbot:<region>:<account>:chat-configuration/slack-channel/<slackChannelName>",scope);class Import extends SlackChannelConfigurationBase{slackChannelConfigurationArn=slackChannelConfigurationArn;role=void 0;grantPrincipal;slackChannelConfigurationName;constructor(s,i){super(s,i),this.grantPrincipal=new(iam()).UnknownPrincipal({resource:this}),cdk().Token.isUnresolved(slackChannelConfigurationArn)?this.slackChannelConfigurationName=cdk().Fn.select(1,cdk().Fn.split("slack-channel/",resourceName)):this.slackChannelConfigurationName=resourceName.substring(14)}}return new Import(scope,id)}static metricAll(metricName,props){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_cloudwatch_MetricOptions(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.metricAll),error}return new(cloudwatch()).Metric({namespace:"AWS/Chatbot",region:"us-east-1",metricName,...props})}slackChannelConfigurationArn=__runInitializers(this,_instanceExtraInitializers);slackChannelConfigurationName;role;grantPrincipal;notificationTopics;constructor(scope,id,props){super(scope,id,{physicalName:props.slackChannelConfigurationName});try{jsiiDeprecationWarnings().aws_cdk_lib_aws_chatbot_SlackChannelConfigurationProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,SlackChannelConfiguration2),error}(0,metadata_resource_1().addConstructMetadata)(this,props),this.role=props.role||new(iam()).Role(this,"ConfigurationRole",{assumedBy:new(iam()).ServicePrincipal("chatbot.amazonaws.com")}),this.grantPrincipal=this.role,this.notificationTopics=props.notificationTopics??[];const configuration=new(chatbot_generated_1()).CfnSlackChannelConfiguration(this,"Resource",{configurationName:props.slackChannelConfigurationName,iamRoleArn:this.role.roleArn,slackWorkspaceId:props.slackWorkspaceId,slackChannelId:props.slackChannelId,snsTopicArns:cdk().Lazy.list({produce:()=>this.notificationTopics.map(topic=>topic.topicArn)},{omitEmpty:!0}),loggingLevel:props.loggingLevel?.toString(),guardrailPolicies:cdk().Lazy.list({produce:()=>props.guardrailPolicies?.map(policy=>policy.managedPolicyArn)},{omitEmpty:!0}),userRoleRequired:props.userRoleRequired});props.logRetention&&new(logs()).LogRetention(this,"LogRetention",{logGroupName:`/aws/chatbot/${props.slackChannelConfigurationName}`,retention:props.logRetention,role:props.logRetentionRole,logGroupRegion:"us-east-1",logRetentionRetryOptions:props.logRetentionRetryOptions}),this.slackChannelConfigurationArn=configuration.ref,this.slackChannelConfigurationName=props.slackChannelConfigurationName}addNotificationTopic(notificationTopic){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_sns_ITopic(notificationTopic)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.addNotificationTopic),error}this.notificationTopics.push(notificationTopic)}static{__runInitializers(_classThis,_classExtraInitializers)}};return SlackChannelConfiguration2=_classThis})();exports.SlackChannelConfiguration=SlackChannelConfiguration;

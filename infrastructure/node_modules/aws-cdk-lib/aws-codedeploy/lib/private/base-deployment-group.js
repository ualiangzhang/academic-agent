"use strict";var __esDecorate=exports&&exports.__esDecorate||function(ctor,descriptorIn,decorators,contextIn,initializers,extraInitializers){function accept(f){if(f!==void 0&&typeof f!="function")throw new TypeError("Function expected");return f}for(var kind=contextIn.kind,key=kind==="getter"?"get":kind==="setter"?"set":"value",target=!descriptorIn&&ctor?contextIn.static?ctor:ctor.prototype:null,descriptor=descriptorIn||(target?Object.getOwnPropertyDescriptor(target,contextIn.name):{}),_,done=!1,i=decorators.length-1;i>=0;i--){var context={};for(var p in contextIn)context[p]=p==="access"?{}:contextIn[p];for(var p in contextIn.access)context.access[p]=contextIn.access[p];context.addInitializer=function(f){if(done)throw new TypeError("Cannot add initializers after decoration has completed");extraInitializers.push(accept(f||null))};var result=(0,decorators[i])(kind==="accessor"?{get:descriptor.get,set:descriptor.set}:descriptor[key],context);if(kind==="accessor"){if(result===void 0)continue;if(result===null||typeof result!="object")throw new TypeError("Object expected");(_=accept(result.get))&&(descriptor.get=_),(_=accept(result.set))&&(descriptor.set=_),(_=accept(result.init))&&initializers.unshift(_)}else(_=accept(result))&&(kind==="field"?initializers.unshift(_):descriptor[key]=_)}target&&Object.defineProperty(target,contextIn.name,descriptor),done=!0},__runInitializers=exports&&exports.__runInitializers||function(thisArg,initializers,value){for(var useValue=arguments.length>2,i=0;i<initializers.length;i++)value=useValue?initializers[i].call(thisArg,value):initializers[i].call(thisArg);return useValue?value:void 0};Object.defineProperty(exports,"__esModule",{value:!0}),exports.DeploymentGroupBase=exports.ImportedDeploymentGroupBase=void 0;var predefined_deployment_config_1=()=>{var tmp=require("./predefined-deployment-config");return predefined_deployment_config_1=()=>tmp,tmp},utils_1=()=>{var tmp=require("./utils");return utils_1=()=>tmp,tmp},iam=()=>{var tmp=require("../../../aws-iam");return iam=()=>tmp,tmp},core_1=()=>{var tmp=require("../../../core");return core_1=()=>tmp,tmp},metadata_resource_1=()=>{var tmp=require("../../../core/lib/metadata-resource");return metadata_resource_1=()=>tmp,tmp},prop_injectable_1=()=>{var tmp=require("../../../core/lib/prop-injectable");return prop_injectable_1=()=>tmp,tmp};let ImportedDeploymentGroupBase=(()=>{let _classDecorators=[prop_injectable_1().propertyInjectable],_classDescriptor,_classExtraInitializers=[],_classThis,_classSuper=core_1().Resource;var ImportedDeploymentGroupBase2=class extends _classSuper{static{_classThis=this}static{const _metadata=typeof Symbol=="function"&&Symbol.metadata?Object.create(_classSuper[Symbol.metadata]??null):void 0;__esDecorate(null,_classDescriptor={value:_classThis},_classDecorators,{kind:"class",name:_classThis.name,metadata:_metadata},null,_classExtraInitializers),ImportedDeploymentGroupBase2=_classThis=_classDescriptor.value,_metadata&&Object.defineProperty(_classThis,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:_metadata})}static PROPERTY_INJECTION_ID="aws-cdk-lib.aws-codedeploy.ImportedDeploymentGroupBase";deploymentGroupName;deploymentGroupArn;constructor(scope,id,props){const deploymentGroupName=props.deploymentGroupName,deploymentGroupArn=core_1().Arn.format({partition:core_1().Aws.PARTITION,account:props.application.env.account,region:props.application.env.region,service:"codedeploy",resource:"deploymentgroup",resourceName:`${props.application.applicationName}/${deploymentGroupName}`,arnFormat:core_1().ArnFormat.COLON_RESOURCE_NAME});super(scope,id,{environmentFromArn:deploymentGroupArn}),(0,metadata_resource_1().addConstructMetadata)(this,props),this.deploymentGroupName=deploymentGroupName,this.deploymentGroupArn=deploymentGroupArn}_bindDeploymentConfig(config){return(0,predefined_deployment_config_1().isPredefinedDeploymentConfig)(config)?config.bindEnvironment(this):config}static{__runInitializers(_classThis,_classExtraInitializers)}};return ImportedDeploymentGroupBase2=_classThis})();exports.ImportedDeploymentGroupBase=ImportedDeploymentGroupBase;let DeploymentGroupBase=(()=>{let _classDecorators=[prop_injectable_1().propertyInjectable],_classDescriptor,_classExtraInitializers=[],_classThis,_classSuper=core_1().Resource;var DeploymentGroupBase2=class extends _classSuper{static{_classThis=this}static{const _metadata=typeof Symbol=="function"&&Symbol.metadata?Object.create(_classSuper[Symbol.metadata]??null):void 0;__esDecorate(null,_classDescriptor={value:_classThis},_classDecorators,{kind:"class",name:_classThis.name,metadata:_metadata},null,_classExtraInitializers),DeploymentGroupBase2=_classThis=_classDescriptor.value,_metadata&&Object.defineProperty(_classThis,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:_metadata})}static PROPERTY_INJECTION_ID="aws-cdk-lib.aws-codedeploy.DeploymentGroupBase";deploymentGroupName;deploymentGroupArn;_role;constructor(scope,id,props){super(scope,id,{physicalName:props.deploymentGroupName}),(0,metadata_resource_1().addConstructMetadata)(this,props),this._role=props.role||new(iam()).Role(this,props.roleConstructId,{assumedBy:new(iam()).ServicePrincipal("codedeploy.amazonaws.com")}),this.node.addValidation({validate:()=>(0,utils_1().validateName)("Deployment group",this.physicalName)})}_bindDeploymentConfig(config){return(0,predefined_deployment_config_1().isPredefinedDeploymentConfig)(config)?config.bindEnvironment(this):config}_setNameAndArn(resource,application){this.deploymentGroupName=this.getResourceNameAttribute(resource.ref),this.deploymentGroupArn=this.getResourceArnAttribute(this.stack.formatArn({service:"codedeploy",resource:"deploymentgroup",resourceName:`${application.applicationName}/${resource.ref}`,arnFormat:core_1().ArnFormat.COLON_RESOURCE_NAME}),{service:"codedeploy",resource:"deploymentgroup",resourceName:`${application.applicationName}/${this.physicalName}`,arnFormat:core_1().ArnFormat.COLON_RESOURCE_NAME})}static{__runInitializers(_classThis,_classExtraInitializers)}};return DeploymentGroupBase2=_classThis})();exports.DeploymentGroupBase=DeploymentGroupBase;
